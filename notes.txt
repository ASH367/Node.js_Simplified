**🗓️ Day 1: Getting Started with Node.js & JavaScript**

---

### ❓ Concepts & Questions

* **What is Node.js?**

  * A runtime that lets you run JavaScript outside the browser. Useful for writing backend code.
  * 📘 Example: Normally, JavaScript runs in a browser like Chrome. With Node.js, you can write JavaScript code in a file and run it on your computer using the terminal:

    ```bash
    node app.js
    ```

* **Is React.js also a runtime?**

  * No, React is a JavaScript **library** for building UI in the browser.
  * 📘 Example: You use React to create components like buttons or forms that update automatically when data changes.

### 🛠️ Setup & Tools

* Create a project folder.
* Open it in VS Code.
* Run `npm init -y` to create `package.json`.
* Use `node filename.js` to run your code.

### ✅ Task

* Create a basic `.js` file:

```js
console.log("Hello Node.js");
```

---

**🗓️ Day 2: JavaScript Functions & Git Basics**

---

### ❓ Concepts & Questions

* **What is ****\`\`****?**

  * An **arrow function**, shorthand for `function(err) {}`.
  * 📘 Example:

    ```js
    const sayHello = (name) => {
      console.log(`Hello, ${name}`);
    }
    sayHello("Ashish");
    ```

* **What does ****\`\`**** do?**

  * Joins file paths safely across OS using correct separators.
  * 📘 Example:

    ```js
    const path = require("path");
    const fullPath = path.join("folder", "file.txt");
    console.log(fullPath); // Outputs folder/file.txt or folder\file.txt depending on OS
    ```

* **What is UTF-8?**

  * A text encoding format for reading/writing files. Ensures readable output.
  * 📘 Example:

    ```js
    fs.readFile("notes.txt", "utf-8", (err, data) => {
      console.log(data); // readable string output
    });
    ```

* **Where does **\`\`** come from?**

  * Node.js supplies it when it calls your callback. You define the parameters, Node fills them.
  * 📘 Example:

    ```js
    fs.readFile("file.txt", "utf-8", (err, data) => {
      // 'data' contains the file's content
    });
    ```

* **What does ****\`\`**** do?**

  * Renames the current branch to `main`, even if it already exists.
  * 📘 Example: Useful when initializing a new repo and you want the main branch to be named "main" instead of "master".

### 🧠 Git Commands Learned

* `git init`: Initialize Git repo
* `git branch -M main`: Rename default branch to `main`

### ✅ Task

* Create a folder
* Initialize Git
* Create `.gitignore`
* Create a `.js` file
* Write a `README.md`

---

**🗓️ Day 3: File System Module (fs)**

---

### ❓ Concepts & Questions

* **What can you do with ****\`\`****?**

  * `fs.writeFile()` – Write content to file

    ```js
    fs.writeFile("notes.txt", "Hello there!", (err) => {});
    ```
  * `fs.appendFile()` – Append content

    ```js
    fs.appendFile("notes.txt", "\nAnother line", (err) => {});
    ```
  * `fs.readFile()` – Read content

    ```js
    fs.readFile("notes.txt", "utf-8", (err, data) => console.log(data));
    ```
  * `fs.unlink()` – Delete a file

    ```js
    fs.unlink("notes.txt", (err) => {});
    ```
  * `fs.mkdir()` – Create folder

    ```js
    fs.mkdir("newFolder", (err) => {});
    ```
  * `fs.readdir()` – Read folder contents

    ```js
    fs.readdir("./", (err, files) => console.log(files));
    ```
  * `fs.rename()` – Rename/move a file

    ```js
    fs.rename("old.txt", "new.txt", (err) => {});
    ```

* **Can I use **\`\`**?**

  * Yes, if you:

    * Rename file to `.mjs`, or
    * Add `"type": "module"` to `package.json`
  * 📘 Example:

    ```js
    import fs from "fs";
    ```

### ✅ Mini Task

1. Create a folder `myFiles`
2. Write to `notes.txt`
3. Read & print it
4. Append data
5. Rename file
6. Delete file

---

These summaries cover the key learnings and hands-on tasks from Days 1–3. Keep building and refining your skills!
